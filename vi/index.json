[
{
	"uri": "https://ngophong010.github.io/Workshop001/vi/",
	"title": "DevOps and Networking",
	"tags": [],
	"description": "",
	"content": "Tìm hiểu về DevOps và Networking Tổng quan Trong workshop này, bạn sẽ học về các kiến thức cơ bản và thực hành về Networking (Mạng máy tính). Workshop tập trung vào việc tìm hiểu về DevOps và Networking, cung cấp một cái nhìn tổng quan về các khía cạnh quan trọng của lĩnh vực này. Nội dung bao gồm các chủ đề từ cơ bản đến nâng cao, bắt đầu với giới thiệu chung, sau đó đi sâu vào mô hình OSI, các giao thức mạng, tự động hóa mạng, và ứng dụng Python trong quản lý mạng. Workshop cũng bao gồm phần thực hành với việc xây dựng lab và trải nghiệm thực tế với Python trong môi trường mạng. Đây là một cơ hội tuyệt vời để học hỏi và áp dụng các kỹ năng DevOps và Networking trong thực tế.\nNội dung Giới thiệu Mô Hình OSI - 7 Lớp Giao thức Mạng Tự động hóa mạng Python cho Tự động hóa Mạng Xây Dựng Phòng Thí Nghiệm Getting Hands-On with Python \u0026amp; Network "
},
{
	"uri": "https://ngophong010.github.io/Workshop001/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "NetDevOps là gì | Network DevOps? Có thể bạn cũng đã nghe đến các thuật ngữ Network DevOps hoặc NetDevOps. Có thể bạn đã là một kỹ sư mạng và hiểu rõ về các thành phần mạng trong hạ tầng mà bạn làm việc, cũng như hiểu các yếu tố liên quan đến mạng như DHCP, DNS, NAT, v.v. Bạn cũng sẽ có kiến thức vững về các tùy chọn mạng phần cứng hoặc phần mềm, switch, router, v.v.\nTuy nhiên, nếu bạn không phải là kỹ sư mạng, thì chúng ta cần có kiến thức cơ bản trong một số lĩnh vực đó để có thể hiểu được mục tiêu cuối cùng của Network DevOps.\nVề mặt các thuật ngữ này, chúng ta có thể coi NetDevOps hoặc Network DevOps là việc áp dụng các nguyên tắc và thực tiễn DevOps vào mạng, áp dụng kiểm soát phiên bản và các công cụ tự động hóa vào việc tạo dựng, kiểm tra, giám sát và triển khai mạng.\nNếu chúng ta nghĩ về Network DevOps như một yêu cầu về tự động hóa, chúng ta đã đề cập trước đây rằng DevOps phá vỡ các rào cản giữa các đội nhóm. Nếu các đội nhóm mạng không thay đổi sang một mô hình và quy trình tương tự, thì họ sẽ trở thành nút thắt cổ chai hoặc thậm chí là điểm thất bại tổng thể.\nViệc sử dụng các nguyên tắc tự động hóa xung quanh cung cấp, cấu hình, kiểm tra, kiểm soát phiên bản và triển khai là một khởi đầu tuyệt vời. Tự động hóa sẽ giúp tăng tốc độ triển khai, đảm bảo tính ổn định của hạ tầng mạng và cải thiện liên tục, cũng như quy trình này có thể được chia sẻ qua nhiều môi trường một khi chúng đã được kiểm tra. Ví dụ như một chính sách mạng đã được kiểm tra hoàn toàn trên một môi trường có thể được sử dụng nhanh chóng ở một vị trí khác nhờ tính chất của nó là mã thay vì một quy trình được viết tay như trước đây. Một cái nhìn và phác thảo thật tuyệt vời về tư duy này có thể được tìm thấy tại đây. Network DevOps\nCơ Bản về Mạng Hãy quên đi khía cạnh DevOps để bắt đầu và bây giờ chúng ta cần xem xét rất ngắn gọn về một số kiến thức cơ bản về mạng.\nThiết bị mạng Nếu bạn thích nội dung này dưới dạng video, hãy xem các video từ Practical Networking:\nThiết bị mạng - Hosts, Địa chỉ IP, Mạng - Cơ bản về mạng - Bài 1a Thiết bị mạng - Hub, Bridge, Switch, Router - Cơ bản về mạng - Bài 1b Host là bất kỳ thiết bị nào gửi hoặc nhận lưu lượng.\nĐịa chỉ IP là danh tính của mỗi host.\nMạng là cái gì đó vận chuyển lưu lượng giữa các host. Nếu không có mạng, sẽ có rất nhiều chuyển động dữ liệu thủ công!\nMột nhóm logic của các host cần có kết nối tương tự.\nSwitch tạo điều kiện cho việc giao tiếp trong một mạng. Một switch chuyển tiếp các gói dữ liệu giữa các host. Một switch gửi gói đến trực tiếp các host.\nMạng: Một nhóm các host cần có kết nối tương tự. Các host trên một mạng chia sẻ cùng một không gian địa chỉ IP. Router tạo điều kiện cho việc giao tiếp giữa các mạng. Như chúng ta đã nói trước đó, một switch quản lý giao tiếp trong một mạng, trong khi router cho phép chúng ta kết nối các mạng này với nhau hoặc ít nhất là cho phép chúng truy cập lẫn nhau nếu được phép.\nMột router có thể cung cấp một điểm kiểm soát lưu lượng (bảo mật, lọc, chuyển tiếp). Ngày càng có nhiều switch cũng cung cấp một số chức năng này.\nRouter học các mạng mà chúng được kết nối. Những mạng này được gọi là tuyến đường, bảng định tuyến là tất cả các mạng mà router biết đến.\nMột router có một địa chỉ IP trong các mạng mà nó được kết nối. Địa chỉ IP này cũng sẽ là cách mà mỗi host ra khỏi mạng cục bộ của chúng, còn được gọi là cổng vào (gateway).\nRouter cũng tạo ra sự phân cấp trong các mạng mà tôi đã đề cập trước đó.\nSwitch so với Router Định tuyến là quá trình di chuyển dữ liệu giữa các mạng.\nMột router là một thiết bị có mục đích chính là định tuyến. Chuyển mạch là quá trình di chuyển dữ liệu trong các mạng.\nMột Switch là một thiết bị có mục đích chính là chuyển mạch. Đây là cái nhìn tổng quan cơ bản về các thiết bị, vì chúng ta biết rằng có nhiều loại thiết bị mạng khác nhau như:\nĐiểm truy cập (Access Points) Tường lửa (Firewalls) Bộ cân bằng tải (Load Balancers) Switch lớp 3 (Layer 3 Switches) IDS / IPS Proxy Switch ảo (Virtual Switches) Router ảo (Virtual Routers) Mặc dù tất cả những thiết bị này đều thực hiện định tuyến và/hoặc chuyển mạch.\n"
},
{
	"uri": "https://ngophong010.github.io/Workshop001/vi/2-osimodel/",
	"title": "Mô Hình OSI - 7 Lớp",
	"tags": [],
	"description": "",
	"content": "Nội dung dưới đây chủ yếu đến từ loạt bài \u0026ldquo;Networking Fundamentals\u0026rdquo; của Practical Networking. Nếu bạn thích nội dung này dưới dạng video, hãy xem hai video sau:\nMô Hình OSI: Góc Nhìn Thực Tiễn - Lớp 1 / 2 / 3 Mô Hình OSI: Góc Nhìn Thực Tiễn - Lớp 4 / 5+ Mô Hình OSI - 7 Lớp Mục đích tổng thể của ngành mạng là cho phép hai máy chủ chia sẻ dữ liệu. Trước khi có mạng, nếu tôi muốn lấy dữ liệu từ máy chủ này sang máy chủ khác, tôi phải cắm một cái gì đó vào máy chủ này, mang nó đến máy chủ kia và cắm vào máy chủ đó.\nMạng cho phép chúng ta tự động hóa điều này bằng cách cho phép máy chủ chia sẻ dữ liệu tự động qua dây dẫn. Để làm điều này, chúng phải tuân theo một tập hợp quy tắc.\nĐiều này không khác gì với bất kỳ ngôn ngữ nào. Tiếng Anh có một tập hợp quy tắc mà hai người nói tiếng Anh phải tuân theo. Tiếng Tây Ban Nha có bộ quy tắc riêng. Tiếng Pháp có bộ quy tắc riêng, trong khi mạng cũng có bộ quy tắc riêng.\nCác quy tắc cho mạng được chia thành bảy lớp khác nhau và các lớp đó được gọi là mô hình OSI.\nGiới Thiệu Về Mô Hình OSI Mô Hình OSI (Mô Hình Kết Nối Hệ Mở) là một khung công tác được sử dụng để mô tả các chức năng của một hệ thống mạng. Mô hình OSI phân loại các chức năng máy tính thành một tập hợp các quy tắc và yêu cầu chung để hỗ trợ khả năng tương tác giữa các sản phẩm và phần mềm khác nhau. Trong mô hình tham chiếu OSI, các giao tiếp giữa một hệ thống máy tính được chia thành bảy lớp trừu tượng khác nhau: Vật lý, Liên kết Dữ liệu, Mạng, Vận chuyển, Phiên, Trình bày, và Ứng dụng.\nLớp Vật Lý Lớp 1 trong mô hình OSI được gọi là vật lý, đề cập đến việc truyền dữ liệu từ một máy chủ này sang máy chủ khác thông qua một phương tiện, có thể là cáp vật lý hoặc Wi-Fi. Chúng ta cũng có thể thấy một số phần cứng cũ như hub và repeater để vận chuyển dữ liệu từ một máy chủ này sang máy chủ khác. Lớp Liên Kết Dữ Liệu Lớp 2, lớp liên kết dữ liệu cho phép chuyển giao dữ liệu từ nút này sang nút khác, nơi dữ liệu được đóng gói thành các khung. Cũng có một mức độ sửa lỗi có thể xảy ra tại lớp vật lý. Đây cũng là nơi chúng ta lần đầu tiên thấy địa chỉ MAC. Lớp Mạng Có lẽ bạn đã nghe thuật ngữ switch lớp 3 hoặc switch lớp 2. Trong mô hình OSI, Lớp 3, Mạng, có mục tiêu là cung cấp dịch vụ từ đầu đến cuối, đây là nơi chúng ta thấy địa chỉ IP được đề cập. Vậy tại sao chúng ta cần các sơ đồ địa chỉ ở cả Lớp 2 và Lớp 3? (Địa chỉ MAC so với Địa chỉ IP)\nKhi chúng ta nghĩ về việc đưa dữ liệu từ một máy chủ này sang máy chủ khác, mỗi máy chủ có một địa chỉ IP nhưng có nhiều switch và router ở giữa. Mỗi thiết bị có địa chỉ MAC lớp 2.\nĐịa chỉ MAC lớp 2 sẽ đi từ máy chủ tới switch/router, nó tập trung vào các bước nhảy, trong khi địa chỉ IP lớp 3 sẽ đi cùng với gói dữ liệu cho đến khi nó đến máy chủ đích. (Từ đầu đến cuối)\nĐịa chỉ IP - Lớp 3 = Dịch vụ từ đầu đến cuối\nĐịa chỉ MAC - Lớp 2 = Dịch vụ từng bước nhảy\nLớp Vận Chuyển Dịch vụ giao hàng giữa các dịch vụ, Lớp 4 được thiết kế để phân biệt các luồng dữ liệu. Tương tự như cách mà Lớp 3 và Lớp 2 có các sơ đồ địa chỉ của riêng chúng, ở Lớp 4 chúng ta có các cổng. Lớp Phiên, Trình Bày, Ứng Dụng Sự phân biệt giữa các Lớp 5, 6, 7 đã trở nên khá mơ hồ.\nĐáng để xem xét Mô Hình TCP/IP để có được sự hiểu biết gần đây hơn.\nBây giờ hãy cùng giải thích những gì đang xảy ra khi các máy chủ giao tiếp với nhau bằng cách sử dụng ngăn xếp mạng này. Máy chủ nguồn sẽ có một ứng dụng tạo ra dữ liệu mà dự kiến sẽ được gửi đến một máy chủ khác.\nMáy chủ nguồn sẽ trải qua quá trình gọi là quá trình đóng gói. Dữ liệu sẽ được gửi đến lớp 4.\nLớp 4 sẽ thêm một tiêu đề vào dữ liệu để thực hiện mục tiêu của lớp 4 là giao hàng giữa các dịch vụ. Điều này sẽ là một cổng sử dụng TCP hoặc UDP. Nó cũng sẽ bao gồm cổng nguồn và cổng đích.\nĐoạn dữ liệu này được gọi là một segment (dữ liệu và cổng).\nSegment này sẽ được chuyển xuống ngăn xếp OSI đến lớp 3, lớp mạng, và lớp mạng sẽ thêm một tiêu đề khác vào dữ liệu này. Tiêu đề này sẽ thực hiện mục tiêu của lớp 3 là dịch vụ từ đầu đến cuối, nghĩa là trong tiêu đề này bạn sẽ có địa chỉ IP nguồn và địa chỉ IP đích, tiêu đề cộng với dữ liệu cũng có thể được gọi là một gói.\nLớp 3 sẽ lấy gói đó và chuyển nó cho lớp 2, lớp 2 sẽ lại thêm một tiêu đề khác vào dữ liệu đó để hoàn thành mục tiêu của lớp 2 là giao hàng từng bước nhảy, nghĩa là tiêu đề này sẽ bao gồm địa chỉ MAC nguồn và địa chỉ MAC đích. Điều này được gọi là một khung khi bạn có tiêu đề lớp 2 và dữ liệu. Tôi đã đề cập ở trên về cái tên cho mỗi lớp của tiêu đề cộng với dữ liệu nhưng đã quyết định vẽ nó ra như sau. Dữ liệu đến từ một ứng dụng đang được gửi đi, vì vậy việc nhận dữ liệu sẽ diễn ra ngược lại để đưa nó lên ngăn xếp và vào máy chủ nhận. "
},
{
	"uri": "https://ngophong010.github.io/Workshop001/vi/3-networkprotocols/",
	"title": "Giao thức Mạng",
	"tags": [],
	"description": "",
	"content": "Giao thức Mạng Một tập hợp các quy tắc và thông điệp tạo thành một tiêu chuẩn. Một Tiêu chuẩn Internet.\nARP - Giao thức Phân giải Địa chỉ Nếu bạn muốn tìm hiểu sâu về ARP, bạn có thể đọc Tiêu chuẩn Internet tại đây. RFC 826\nKết nối địa chỉ IP với các địa chỉ máy cố định, còn được gọi là địa chỉ MAC trên một mạng lớp 2. FTP - Giao thức Chuyển File Cho phép chuyển file từ nguồn đến đích. Quá trình này thường được xác thực nhưng có khả năng sử dụng truy cập ẩn danh nếu được cấu hình. Hiện nay, bạn sẽ thấy FTPS nhiều hơn, cung cấp kết nối SSL/TLS đến các máy chủ FTP từ phía khách hàng để tăng cường bảo mật. Giao thức này sẽ được tìm thấy trong lớp Ứng dụng của Mô hình OSI. SMTP - Giao thức Chuyển Giao Thư Đơn Được sử dụng để truyền tải email, các máy chủ mail sử dụng SMTP để gửi và nhận tin nhắn thư. Ngay cả với Microsoft 365, giao thức SMTP vẫn được sử dụng cho cùng mục đích. HTTP - Giao thức Truyền Tải Siêu Văn Bản HTTP là nền tảng của internet và việc duyệt nội dung. Cho phép chúng ta dễ dàng truy cập vào các trang web yêu thích. HTTP vẫn được sử dụng nhiều nhưng HTTPS hiện nay được sử dụng nhiều hơn hoặc nên được sử dụng trên hầu hết các trang web yêu thích của bạn. SSL - Lớp Sockets Bảo mật | TLS - Bảo mật Giao vận TLS đã thay thế SSL, TLS là một Giao thức Mã hóa cung cấp các giao tiếp an toàn qua một mạng. Nó có thể và sẽ được tìm thấy trong mail, nhắn tin nhanh và các ứng dụng khác, nhưng phổ biến nhất là được sử dụng để bảo mật HTTPS. HTTPS - HTTP được bảo mật bằng SSL/TLS Là một phần mở rộng của HTTP, được sử dụng cho các giao tiếp an toàn qua một mạng, HTTPS được mã hóa bằng TLS như đã đề cập ở trên. Mục tiêu ở đây là cung cấp xác thực, quyền riêng tư và toàn vẹn trong khi dữ liệu được trao đổi giữa các máy chủ. DNS - Hệ thống Tên Miền DNS được sử dụng để ánh xạ các tên miền thân thiện với con người, ví dụ như chúng ta đều biết google.com nhưng nếu bạn mở trình duyệt và nhập 8.8.8.8 bạn sẽ thấy Google như chúng ta đã biết. Tuy nhiên, thật khó để nhớ tất cả các địa chỉ IP cho tất cả các trang web mà một số trong đó chúng ta thậm chí sử dụng Google để tìm kiếm thông tin.\nĐây là nơi DNS xuất hiện, đảm bảo rằng các máy chủ, dịch vụ và tài nguyên khác đều có thể tiếp cận được.\nTrên tất cả các máy chủ, nếu họ cần kết nối internet thì họ phải có DNS để có thể phân giải các tên miền. DNS là một lĩnh vực mà bạn có thể dành cả Ngày và Năm để học hỏi. Tôi cũng sẽ nói từ kinh nghiệm rằng DNS thường là nguyên nhân chính của tất cả các lỗi khi nói đến Mạng. Không biết liệu một kỹ sư mạng có đồng ý với điều đó không. DHCP - Giao thức Cấp phát Địa chỉ Động Chúng ta đã thảo luận rất nhiều về các giao thức cần thiết để làm cho các máy chủ hoạt động, cho dù là truy cập internet hay chuyển file giữa nhau.\nCó 4 điều mà chúng ta cần trên mỗi máy chủ để có thể thực hiện cả hai nhiệm vụ đó.\nĐịa chỉ IP Mặt nạ Subnet Cổng Mặc định DNS Chúng ta đã đề cập đến địa chỉ IP là một địa chỉ duy nhất cho máy chủ của bạn trên mạng mà nó nằm, chúng ta có thể nghĩ đến điều này như số nhà của chúng ta.\nMặt nạ subnet sẽ được đề cập sau, nhưng bạn có thể nghĩ về điều này như mã bưu điện hoặc mã zip.\nCổng mặc định là IP của bộ định tuyến trên mạng của chúng ta cung cấp cho chúng ta kết nối Lớp 3. Bạn có thể nghĩ về điều này như con đường duy nhất cho phép chúng ta ra khỏi phố của mình.\nSau đó, chúng ta có DNS như đã đề cập để giúp chúng ta chuyển đổi các địa chỉ IP công cộng phức tạp thành các tên miền dễ nhớ hơn. Có thể chúng ta có thể nghĩ về điều này như một văn phòng phân loại khổng lồ để đảm bảo chúng ta nhận được đúng bưu phẩm.\nNhư tôi đã nói, mỗi máy chủ cần 4 thứ này, nếu bạn có 1000 hoặc 10.000 máy chủ thì điều đó sẽ mất rất nhiều thời gian để xác định từng cái một. Đây là nơi DHCP xuất hiện và cho phép bạn xác định một phạm vi cho mạng của bạn và sau đó giao thức này sẽ phân phối cho tất cả các máy chủ có sẵn trong mạng của bạn.\nMột ví dụ khác là bạn vào một quán cà phê, lấy một tách cà phê và ngồi xuống với máy tính xách tay hoặc điện thoại của bạn, hãy gọi đó là máy chủ của bạn. Bạn kết nối máy chủ của mình với WiFi quán cà phê và bạn có quyền truy cập vào internet, tin nhắn và thư bắt đầu ping qua và bạn có thể duyệt các trang web và mạng xã hội. Khi bạn kết nối với WiFi quán cà phê, máy của bạn sẽ nhận được một địa chỉ DHCP từ một máy chủ DHCP chuyên dụng hoặc có thể là từ bộ định tuyến cũng xử lý DHCP. Phân đoạn Mạng Một subnet là một phân vùng logic của một mạng IP.\nCác subnet chia các mạng lớn thành các mạng nhỏ hơn, dễ quản lý hơn và hoạt động hiệu quả hơn.\nMỗi subnet là một phân vùng logic của mạng lớn hơn. Các thiết bị kết nối đủ subnet chia sẻ các định danh địa chỉ IP chung, cho phép chúng giao tiếp với nhau.\nCác bộ định tuyến quản lý giao tiếp giữa các subnet.\nKích thước của một subnet phụ thuộc vào yêu cầu kết nối và công nghệ mạng được sử dụng.\nMột tổ chức có trách nhiệm xác định số lượng và kích thước của các subnet trong giới hạn không gian địa chỉ có sẵn, và các chi tiết này vẫn là địa phương đối với tổ chức đó. Các subnet cũng có thể được phân đoạn thành các subnet nhỏ hơn cho các liên kết Point-to-Point hoặc các mạng con hỗ trợ một vài thiết bị.\nGiữa các lợi ích khác, việc phân đoạn các mạng lớn thành các subnet cho phép tái phân bổ địa chỉ IP và giảm tắc nghẽn mạng, tối ưu hóa giao tiếp và hiệu suất mạng.\nCác subnet cũng có thể cải thiện bảo mật mạng. Nếu một phần của mạng bị xâm nhập, nó có thể được cách ly, làm cho kẻ xấu khó khăn trong việc di chuyển xung quanh mạng lớn hơn. "
},
{
	"uri": "https://ngophong010.github.io/Workshop001/vi/4-networkautomation/",
	"title": "Tự động hóa mạng",
	"tags": [],
	"description": "",
	"content": "Tự động hóa mạng Kiến thức cơ bản về tự động hóa mạng Các động lực chính cho Tự động hóa Mạng\nĐạt được tính linh hoạt Giảm chi phí Loại bỏ lỗi Đảm bảo tuân thủ Quản lý tập trung Quá trình áp dụng tự động hóa là cụ thể cho từng doanh nghiệp. Không có một giải pháp chung nào khi triển khai tự động hóa; khả năng xác định và áp dụng phương pháp phù hợp nhất cho tổ chức của bạn là rất quan trọng để tiến tới duy trì hoặc tạo ra một môi trường linh hoạt hơn. Luôn luôn tập trung vào giá trị kinh doanh và trải nghiệm người dùng cuối. (Chúng tôi đã đề cập đến điều gì đó tương tự ngay từ đầu về toàn bộ DevOps và sự thay đổi văn hóa mà quy trình tự động hóa này mang lại.)\nĐể phân tích điều này, bạn cần xác định cách nhiệm vụ hoặc quy trình mà bạn đang cố gắng tự động hóa sẽ đạt được và cải thiện trải nghiệm người dùng cuối hoặc giá trị kinh doanh trong khi tuân theo một phương pháp có hệ thống từng bước.\n\u0026ldquo;Nếu bạn không biết bạn đang đi đâu, bất kỳ con đường nào cũng sẽ đưa bạn đến đó.\u0026rdquo;\nHãy có một khung hoặc cấu trúc thiết kế mà bạn đang cố gắng đạt được, biết được mục tiêu cuối cùng của bạn và sau đó làm việc từng bước để đạt được mục tiêu đó, đo lường sự thành công của tự động hóa ở các giai đoạn khác nhau dựa trên kết quả kinh doanh.\nXây dựng các khái niệm được mô hình hóa xung quanh các ứng dụng hiện có; không cần thiết kế các khái niệm xung quanh tự động hóa trong một không gian kín, vì chúng cần được áp dụng cho ứng dụng, dịch vụ và cơ sở hạ tầng hiện tại của bạn.\nCách tiếp cận Tự động hóa Mạng Chúng ta nên xác định các nhiệm vụ và thực hiện khám phá các yêu cầu thay đổi mạng để có được các vấn đề và sự cố phổ biến nhất cần tự động hóa giải pháp cho chúng.\nLập danh sách tất cả các yêu cầu thay đổi và quy trình làm việc hiện đang được xử lý thủ công. Xác định các hoạt động phổ biến, tốn thời gian và dễ xảy ra lỗi nhất. Ưu tiên các yêu cầu theo cách tiếp cận dựa trên kinh doanh. Đây là khung cho việc xây dựng một quy trình tự động hóa, những gì cần tự động hóa và những gì không cần. Chúng ta cũng nên chia nhỏ các nhiệm vụ và phân tích cách các chức năng mạng khác nhau hoạt động và tương tác với nhau.\nNhóm hạ tầng/Mạng nhận các vé thay đổi ở nhiều lớp để triển khai ứng dụng. Dựa trên dịch vụ mạng, chia chúng thành các lĩnh vực khác nhau và hiểu cách chúng tương tác với nhau. Tối ưu hóa ứng dụng ADC (Bộ điều khiển phân phối ứng dụng) Tường lửa DDI (DNS, DHCP, IPAM, v.v.) Định tuyến Khác Xác định các phụ thuộc khác nhau để giải quyết sự khác biệt về doanh nghiệp và văn hóa và mang lại sự hợp tác giữa các nhóm. Chính sách có thể tái sử dụng, định nghĩa và đơn giản hóa các nhiệm vụ dịch vụ có thể tái sử dụng, quy trình và đầu vào/đầu ra.\nĐịnh nghĩa các dịch vụ cho các quy trình khác nhau và đầu vào/đầu ra. Đơn giản hóa quy trình triển khai sẽ giảm thời gian ra thị trường cho cả khối lượng công việc mới và hiện có. Khi bạn có một quy trình tiêu chuẩn, nó có thể được sắp xếp và căn chỉnh với các yêu cầu cá nhân để có được phương pháp tiếp cận đa luồng và phân phối. Kết hợp các chính sách với các hoạt động cụ thể cho doanh nghiệp. Việc triển khai chính sách này giúp ích cho doanh nghiệp như thế nào? Tiết kiệm thời gian? Tiết kiệm chi phí? Cung cấp kết quả kinh doanh tốt hơn?\nĐảm bảo rằng các nhiệm vụ dịch vụ có thể tương tác. Liên kết các nhiệm vụ dịch vụ gia tăng để tạo ra các dịch vụ kinh doanh. Cho phép linh hoạt để liên kết và tái liên kết các nhiệm vụ dịch vụ theo nhu cầu. Triển khai khả năng tự phục vụ và mở đường cho hiệu quả hoạt động cải thiện. Cho phép nhiều kỹ năng công nghệ khác nhau tiếp tục đóng góp với sự giám sát và tuân thủ. Lặp lại các chính sách và quy trình, thêm vào và cải tiến trong khi duy trì tính khả dụng và dịch vụ.\nBắt đầu nhỏ bằng cách tự động hóa các nhiệm vụ hiện có. Làm quen với quy trình tự động hóa, để bạn có thể xác định các lĩnh vực khác có thể hưởng lợi từ tự động hóa. Lặp lại các sáng kiến tự động hóa của bạn, thêm tính linh hoạt từng bước trong khi duy trì tính khả dụng cần thiết. Phương pháp tiếp cận từng phần mở đường cho thành công! Orchestrate dịch vụ mạng!\nCần tự động hóa quy trình triển khai để cung cấp ứng dụng nhanh chóng. Tạo ra một môi trường dịch vụ linh hoạt đòi hỏi phải quản lý nhiều yếu tố khác nhau giữa các kỹ năng công nghệ. Chuẩn bị cho việc điều phối toàn diện cung cấp kiểm soát đối với tự động hóa và thứ tự triển khai. Công cụ Tự động hóa Mạng Tin tốt là hầu hết các công cụ chúng ta sử dụng cho Tự động hóa Mạng thường giống như các công cụ chúng ta sẽ sử dụng cho các lĩnh vực tự động hóa khác hoặc những gì chúng ta đã đề cập cho đến nay hoặc sẽ đề cập trong các phiên sau.\nHệ điều hành - Như tôi đã đề cập trong suốt thử thách này, tôi tập trung vào việc học chủ yếu với hệ điều hành Linux, lý do này đã được trình bày trong phần Linux, nhưng gần như tất cả các công cụ mà chúng ta sẽ đề cập, mặc dù là ứng dụng đa hệ điều hành, đều bắt đầu là các ứng dụng hoặc công cụ dựa trên Linux.\nMôi trường phát triển tích hợp (IDE) - Một lần nữa không có gì nhiều để nói ở đây ngoài việc tôi sẽ gợi ý Visual Studio Code làm IDE của bạn, dựa trên các plugin phong phú có sẵn cho nhiều ngôn ngữ khác nhau.\nQuản lý cấu hình - Chúng ta chưa đến phần quản lý cấu hình, nhưng rất rõ ràng rằng Ansible là một lựa chọn ưa thích trong lĩnh vực này để quản lý và tự động hóa cấu hình. Ansible được viết bằng Python nhưng bạn không cần phải biết Python.\nKhông cần agent Chỉ yêu cầu SSH Cộng đồng hỗ trợ lớn Nhiều mô-đun mạng Chỉ mô hình đẩy Cấu hình bằng YAML Mã nguồn mở! Liên kết đến các mô-đun mạng Ansible\nChúng ta cũng sẽ đề cập đến Ansible Tower trong phần quản lý cấu hình, hãy xem đây là giao diện GUI cho Ansible.\nCI/CD - Một lần nữa chúng ta sẽ đề cập nhiều hơn về các khái niệm và công cụ xung quanh điều này, nhưng điều quan trọng là ít nhất nên đề cập đến vì nó không chỉ bao gồm mạng mà còn tất cả việc cung cấp dịch vụ và nền tảng.\nCụ thể, Jenkins cung cấp hoặc có vẻ là một công cụ phổ biến cho Tự động hóa Mạng.\nGiám sát kho git để phát hiện thay đổi và sau đó khởi động chúng. Kiểm soát phiên bản - Một lần nữa, chúng ta sẽ tìm hiểu sâu hơn sau này.\nGit cung cấp kiểm soát phiên bản mã của bạn trên thiết bị cục bộ - Đa nền tảng GitHub, GitLab, BitBucket, v.v. là các trang web trực tuyến nơi bạn xác định kho lưu trữ và tải mã của bạn lên. Ngôn ngữ | Kịch bản - Một điều mà chúng ta chưa đề cập ở đây là Python như một ngôn ngữ, tôi quyết định khám phá Go thay vì nhờ vào hoàn cảnh của mình, tôi sẽ nói rằng đó là một sự lựa chọn gần như ngang nhau giữa Golang và Python và Python dường như là lựa chọn hàng đầu cho Tự động hóa Mạng.\nNornir là một điều cần đề cập ở đây, một khung tự động hóa được viết bằng Python. Điều này dường như thay thế Ansible nhưng cụ thể cho Tự động hóa Mạng. Tài liệu Nornir Phân tích API - Postman là một công cụ tuyệt vời để phân tích các API RESTful. Giúp xây dựng, kiểm tra và sửa đổi API.\nPOST \u0026raquo;\u0026gt; Để tạo các đối tượng tài nguyên. GET \u0026raquo;\u0026gt; Để lấy một tài nguyên. PUT \u0026raquo;\u0026gt; Để tạo hoặc thay thế các tài nguyên. PATCH \u0026raquo;\u0026gt; Để tạo hoặc cập nhật đối tượng tài nguyên. DELETE \u0026raquo;\u0026gt; Để xóa một tài nguyên. Liên kết tải công cụ Postman\nCác công cụ khác cần đề cập Cisco NSO (Bộ điều phối Dịch vụ Mạng)\nNetYCE - Đơn giản hóa Tự động hóa Mạng\nTự động hóa Kiểm tra Mạng\n"
},
{
	"uri": "https://ngophong010.github.io/Workshop001/vi/5-pythonfornetworkautomation/",
	"title": "Python cho Tự động hóa Mạng",
	"tags": [],
	"description": "",
	"content": "Python cho Tự động hóa Mạng Python là ngôn ngữ tiêu chuẩn được sử dụng cho các hoạt động mạng tự động.\nMặc dù không chỉ dành riêng cho tự động hóa mạng, Python dường như xuất hiện ở khắp nơi khi bạn tìm kiếm tài nguyên và như đã đề cập trước đó, nếu không phải là Python thì thường là Ansible, cũng được viết bằng Python.\nDễ đọc và dễ sử dụng - Có vẻ như Python dễ hiểu. Dường như không có yêu cầu về {} trong mã để bắt đầu và kết thúc các khối. Kết hợp điều này với một IDE mạnh mẽ như VS Code, bạn có một khởi đầu khá dễ dàng khi muốn chạy một số mã Python. Pycharm có thể là một IDE khác đáng được đề cập ở đây.\nThư viện - Khả năng mở rộng của Python là kho báu thực sự ở đây, tôi đã đề cập trước đó rằng điều này không chỉ dành cho Tự động hóa Mạng mà thực tế, có rất nhiều thư viện cho tất cả các loại thiết bị và cấu hình. Bạn có thể thấy số lượng lớn ở đây PyPi Khi bạn muốn tải thư viện về máy trạm của mình, bạn sử dụng một công cụ gọi là pip để kết nối với PyPI và tải nó về máy cục bộ. Các nhà cung cấp mạng như Cisco, Juniper và Arista đã phát triển các thư viện để tạo điều kiện truy cập vào thiết bị của họ.\nMạnh mẽ \u0026amp; Hiệu quả - Nhớ lại trong những ngày Go, tôi đã trải qua kịch bản \u0026ldquo;Hello World\u0026rdquo; và chúng ta đã đi qua tôi nghĩ là 6 dòng mã? Trong Python, nó chỉ là print(\u0026#39;hello world\u0026#39;) Khi tổng hợp tất cả các điểm trên, dễ dàng thấy được lý do tại sao Python thường được nhắc đến như công cụ mặc định khi làm việc với tự động hóa.\nĐiều quan trọng cần lưu ý là có thể vài năm trước đã có các script tương tác với thiết bị mạng để tự động hóa sao lưu cấu hình hoặc thu thập nhật ký và thông tin chi tiết khác về thiết bị của bạn. Tự động hóa mà chúng ta đang nói đến ở đây hơi khác một chút vì tổng thể cảnh quan mạng cũng đã thay đổi để phù hợp hơn với cách suy nghĩ này và cho phép tự động hóa nhiều hơn.\nMạng Định nghĩa bằng Phần mềm - Các bộ điều khiển SDN chịu trách nhiệm cung cấp cấu hình mặt phẳng điều khiển cho tất cả các thiết bị trên mạng, có nghĩa là chỉ cần một điểm liên hệ duy nhất cho bất kỳ thay đổi mạng nào, không còn phải telnet hoặc SSH vào từng thiết bị và cũng không phải dựa vào con người để thực hiện điều này, điều có thể dẫn đến lỗi hoặc cấu hình sai lặp đi lặp lại.\nĐiều phối Cấp cao - Đi lên một cấp từ các bộ điều khiển SDN đó và điều này cho phép điều phối các cấp độ dịch vụ, sau đó là tích hợp lớp điều phối này vào các nền tảng bạn chọn, VMware, Kubernetes, Public Clouds, v.v.\nQuản lý dựa trên Chính sách - Bạn muốn có gì? Trạng thái mong muốn là gì? Bạn mô tả điều này và hệ thống có tất cả các chi tiết về cách tìm ra để trở thành trạng thái mong muốn.\nThiết lập môi trường thử nghiệm Không phải ai cũng có quyền truy cập vào các bộ định tuyến, switch và các thiết bị mạng vật lý khác.\nTôi muốn cho phép chúng ta xem xét một số công cụ đã đề cập trước đó nhưng cũng thực hành và học cách tự động hóa cấu hình mạng của chúng ta.\nKhi nói đến các tùy chọn, có một vài lựa chọn mà chúng ta có thể chọn.\nGNS3 VM Eve-ng Unimus Không phải là môi trường thử nghiệm nhưng là một khái niệm thú vị. Chúng ta sẽ xây dựng phòng thí nghiệm của mình bằng Eve-ng như đã đề cập trước đó, bạn có thể sử dụng thiết bị vật lý nhưng để nói thật, môi trường ảo có nghĩa là chúng ta có thể có một môi trường sandbox để thử nghiệm nhiều kịch bản khác nhau. Ngoài ra, có thể chơi với các thiết bị và cấu trúc liên kết khác nhau có thể là điều thú vị.\nChúng ta sẽ làm mọi thứ trên EVE-NG với phiên bản cộng đồng.\nBắt đầu Phiên bản cộng đồng có sẵn dưới dạng ISO và OVF để tải xuống\nChúng ta sẽ sử dụng bản tải xuống OVF nhưng với ISO, có tùy chọn xây dựng trên máy chủ bare metal mà không cần hypervisor. Đối với hướng dẫn của chúng ta, chúng ta sẽ sử dụng VMware Workstation vì tôi có giấy phép thông qua vExpert của mình nhưng bạn cũng có thể sử dụng VMware Player hoặc bất kỳ tùy chọn nào khác được đề cập trong tài liệu. Rất tiếc, chúng ta không thể sử dụng Virtual box mà chúng ta đã sử dụng trước đó!\nĐây cũng là nơi tôi đã gặp vấn đề với GNS3 với Virtual Box mặc dù được hỗ trợ.\nTải xuống VMware Workstation Player - MIỄN PHÍ\nVMware Workstation PRO Cũng lưu ý rằng có giai đoạn đánh giá miễn phí!\nCài đặt trên VMware Workstation PRO Bây giờ chúng ta đã tải xuống và cài đặt phần mềm hypervisor của mình, và chúng ta đã tải xuống EVE-NG OVF. Nếu bạn đang sử dụng VMware Player, vui lòng cho tôi biết nếu quy trình này giống nhau.\nBây giờ chúng ta đã sẵn sàng để cấu hình mọi thứ.\nMở VMware Workstation và sau đó chọn file và open Khi bạn tải xuống EVE-NG OVF Image, nó sẽ nằm trong một file nén. Giải nén nội dung ra thành một thư mục riêng để nó trông giống như thế này. Điều hướng đến vị trí nơi bạn đã tải xuống EVE-NG OVF image và bắt đầu nhập.\nĐặt cho nó một tên dễ nhận biết và lưu trữ máy ảo ở đâu đó trên hệ thống của bạn. Khi quá trình nhập hoàn tất, hãy tăng số lượng bộ xử lý lên 4 và bộ nhớ được phân bổ lên 8 GB. (Điều này sẽ được thực hiện sau khi nhập với phiên bản mới nhất, nếu không thì hãy chỉnh sửa cài đặt VM)\nNgoài ra, hãy đảm bảo rằng hộp kiểm Virtualise Intel VT-x/EPT hoặc AMD-V/RVI được bật. Tùy chọn này hướng dẫn VMware workstation chuyển các cờ ảo hóa sang hệ điều hành khách (ảo hóa lồng nhau) Đây là vấn đề tôi đang gặp phải với GNS3 với Virtual Box mặc dù CPU của tôi cho phép điều này.\nBật nguồn \u0026amp; Truy cập Lưu ý \u0026amp; Đường vòng: Nhớ rằng tôi đã đề cập rằng điều này sẽ không hoạt động với VirtualBox! Vâng, tôi đã gặp vấn đề tương tự với VMware Workstation và EVE-NG nhưng không phải do lỗi của nền tảng ảo hóa!\nTôi đang chạy WSL2 trên Máy Windows của mình và điều này dường như loại bỏ khả năng chạy bất cứ thứ gì lồng nhau trong môi trường của bạn. Tôi bối rối vì sao VM Ubuntu lại chạy vì nó dường như loại bỏ khía cạnh ảo hóa Intel VT-d của CPU khi sử dụng WSL2.\nĐể giải quyết vấn đề này, chúng ta có thể chạy lệnh sau trên máy Windows của mình và khởi động lại hệ thống, lưu ý rằng trong khi tắt thì bạn sẽ không thể sử dụng WSL2.\nbcdedit /set hypervisorlaunchtype off\nKhi bạn muốn quay lại và sử dụng WSL2, bạn sẽ cần chạy lệnh này và khởi động lại.\nbcdedit /set hypervisorlaunchtype auto\nCả hai lệnh này đều phải được chạy với quyền quản trị!\nOk quay lại chương trình, Bây giờ bạn nên có một máy đã được bật trong VMware Workstation và bạn nên có một lời nhắc trông giống như thế này. Trên lời nhắc trên bạn có thể sử dụng:\ntên người dùng = root mật khẩu = eve\nSau đó bạn sẽ được yêu cầu cung cấp lại mật khẩu root, điều này sẽ được sử dụng để SSH vào máy chủ sau này.\nSau đó chúng ta có thể thay đổi tên máy chủ. Tiếp theo, chúng ta xác định Tên miền DNS, tôi đã sử dụng tên dưới đây nhưng tôi không chắc liệu điều này có cần thay đổi sau này hay không. Sau đó chúng ta cấu hình mạng, tôi chọn static để địa chỉ IP được cấp sẽ được giữ nguyên sau khi khởi động lại. Bước cuối cùng, cung cấp địa chỉ IP tĩnh từ mạng có thể truy cập được từ máy trạm của bạn. Có một số bước bổ sung ở đây nơi bạn sẽ phải cung cấp mặt nạ mạng con cho mạng của mình, cổng mặc định và DNS.\nKhi hoàn tất, nó sẽ khởi động lại, khi nó hoạt động trở lại, bạn có thể lấy địa chỉ IP tĩnh của mình và đặt nó vào trình duyệt của bạn. Tên người dùng mặc định cho GUI là admin và mật khẩu là eve trong khi tên người dùng mặc định cho SSH là root và mật khẩu là eve nhưng điều này đã được thay đổi nếu bạn đã thay đổi trong quá trình thiết lập. Tôi đã chọn HTML5 cho bảng điều khiển thay vì native vì điều này sẽ mở một tab mới trong trình duyệt của bạn khi bạn đang điều hướng qua các bảng điều khiển khác nhau.\n"
},
{
	"uri": "https://ngophong010.github.io/Workshop001/vi/6-buildingourlab/",
	"title": "Xây Dựng Phòng Thí Nghiệm",
	"tags": [],
	"description": "",
	"content": "Xây Dựng Phòng Thí Nghiệm Chúng ta sẽ tiếp tục thiết lập mạng mô phỏng của mình bằng EVE-NG và hi vọng rằng sẽ triển khai một số thiết bị và bắt đầu nghĩ về cách tự động hóa cấu hình của các thiết bị này. Trên Python cho Tự Động Hóa Mạng, chúng ta đã đề cập đến việc cài đặt EVE-NG trên máy của mình bằng VMware Workstation.\nCài Đặt EVE-NG Client Cũng có một gói khách cho phép chúng ta lựa chọn ứng dụng nào sẽ được sử dụng khi SSH vào các thiết bị. Nó cũng sẽ thiết lập Wireshark để bắt gói giữa các liên kết. Bạn có thể tải gói khách cho hệ điều hành của mình (Windows, macOS, Linux).\nTải EVE-NG Client Mẹo Nhanh: Nếu bạn đang sử dụng Linux làm máy khách, thì có gói khách này.\nCài đặt khá đơn giản, chỉ cần tiếp tục và tôi gợi ý để lại các cài đặt mặc định.\nLấy Ảnh Mạng Bước này đã gặp nhiều thử thách, tôi đã theo dõi một số video mà tôi sẽ liên kết ở cuối, cung cấp các nguồn và tải về cho ảnh router và switch của chúng ta đồng thời hướng dẫn cách và nơi tải lên chúng.\nQuan trọng lưu ý rằng tôi sử dụng mọi thứ cho mục đích giáo dục. Tôi khuyên bạn nên tải xuống các ảnh chính thức từ các nhà cung cấp mạng.\nBlog \u0026amp; Liên Kết đến Video YouTube\nCách Thêm Ảnh Cisco VIRL vIOS vào Eve-ng\nTổng thể, các bước ở đây có phần phức tạp và có thể dễ hơn nhiều, nhưng các blog và video trên hướng dẫn chi tiết quy trình thêm các ảnh vào EVE-NG của bạn.\nTôi đã sử dụng FileZilla để chuyển qcow2 đến VM qua SFTP.\nĐối với phòng thí nghiệm của chúng ta, chúng ta cần Cisco vIOS L2 (switches) và Cisco vIOS (router).\nTạo Phòng Thí Nghiệm Trong giao diện web EVE-NG, chúng ta sẽ tạo ra một topo mạng mới. Chúng ta sẽ có bốn switch và một router sẽ hoạt động như cổng kết nối đến các mạng bên ngoài.\nNode Địa Chỉ IP Router 10.10.88.110 Switch1 10.10.88.111 Switch2 10.10.88.112 Switch3 10.10.88.113 Switch4 10.10.88.114 Thêm Các Node vào EVE-NG Khi bạn lần đầu đăng nhập vào EVE-NG, bạn sẽ thấy một màn hình như bên dưới, chúng ta muốn bắt đầu bằng cách tạo phòng thí nghiệm đầu tiên. Đặt tên cho phòng thí nghiệm của bạn và các trường khác là tùy chọn. Bạn sẽ thấy một bức tranh trống để bắt đầu tạo mạng của mình. Nhấp chuột phải vào canvas của bạn và chọn thêm node.\nTừ đây, bạn sẽ có một danh sách dài các tùy chọn node. Nếu bạn đã theo dõi các bước trên, bạn sẽ thấy hai node màu xanh như hình dưới và các node khác sẽ màu xám và không thể chọn. Chúng ta muốn thêm các node sau vào phòng thí nghiệm:\n1 x Cisco vIOS Router 4 x Cisco vIOS Switch Chạy qua wizard đơn giản để thêm chúng vào phòng thí nghiệm và nó sẽ trông giống như hình bên dưới. Kết Nối Các Node Chúng ta cần thêm kết nối giữa các router và switch. Chúng ta có thể làm điều này khá dễ dàng bằng cách di chuột qua thiết bị và nhìn thấy biểu tượng kết nối như dưới đây và sau đó kết nối nó với thiết bị mà chúng ta muốn kết nối. Khi bạn đã hoàn thành việc kết nối môi trường của mình, bạn cũng có thể muốn thêm một cách nào đó để định nghĩa các ranh giới hoặc vị trí vật lý bằng cách sử dụng hộp hoặc vòng tròn, có thể tìm thấy trong menu nhấp chuột phải. Bạn cũng có thể thêm văn bản, điều này rất hữu ích khi chúng ta muốn định nghĩa tên hoặc địa chỉ IP trong các phòng thí nghiệm của mình.\nTôi đã làm cho phòng thí nghiệm của mình trông như hình bên dưới. Bạn cũng sẽ nhận thấy rằng phòng thí nghiệm trên đều tắt nguồn, chúng ta có thể khởi động phòng thí nghiệm của mình bằng cách chọn tất cả và nhấp chuột phải chọn khởi động đã chọn. Khi chúng ta đã có phòng thí nghiệm lên và chạy, bạn sẽ có thể console vào từng thiết bị và bạn sẽ nhận thấy rằng vào giai đoạn này chúng đều khá \u0026ldquo;đần độn\u0026rdquo; với không có cấu hình. Chúng ta có thể thêm một số cấu hình cho mỗi node bằng cách sao chép hoặc tự tạo trong mỗi terminal.\nTôi sẽ để cấu hình của mình trong thư mục Networking của kho lưu trữ để tham khảo.\nNode Cấu Hình Router R1 Switch1 SW1 Switch2 SW2 Switch3 SW3 Switch4 SW4 "
},
{
	"uri": "https://ngophong010.github.io/Workshop001/vi/7-hands-on/",
	"title": "Thực Hành với Python &amp; Mạng",
	"tags": [],
	"description": "",
	"content": "Thực Hành với Python \u0026amp; Mạng Trong phần cuối cùng của kiến thức cơ bản về Mạng, chúng ta sẽ đề cập đến một số tác vụ và công cụ tự động hóa trong môi trường phòng thí nghiệm mà chúng ta đã tạo ra trong Xây Dựng Phòng Thí Nghiệm.\nChúng ta sẽ sử dụng một đường hầm SSH để kết nối với các thiết bị từ máy khách thay vì telnet. Đường hầm SSH được tạo ra giữa máy khách và thiết bị được mã hóa.\nTruy cập môi trường giả lập ảo của chúng ta Để tương tác với các switch, chúng ta cần một máy trạm bên trong mạng EVE-NG hoặc bạn có thể triển khai một máy Linux ở đó với Python đã được cài đặt để thực hiện tự động hóa (Tài nguyên để thiết lập Linux trong EVE-NG) hoặc bạn có thể làm như tôi và định nghĩa một cloud để truy cập từ máy trạm của mình. Để thực hiện điều này, chúng ta đã nhấp chuột phải vào canvas và chọn mạng, sau đó chọn \u0026ldquo;Management(Cloud0)\u0026rdquo; để kết nối với mạng gia đình của chúng ta. Tuy nhiên, chúng ta chưa có gì trong mạng này, vì vậy chúng ta cần thêm kết nối từ mạng mới đến từng thiết bị. (Kiến thức mạng của tôi cần được cải thiện và tôi cảm thấy rằng bạn có thể chỉ cần thực hiện bước tiếp theo này đến router chính và sau đó có kết nối đến phần còn lại của mạng thông qua một cáp này?)\nTôi đã đăng nhập vào từng thiết bị và thực hiện các lệnh sau cho các giao diện áp dụng nơi cloud đến.\nenable config t int g0/0 IP add DHCP no sh exit exit sh ip int br Bước cuối cùng cho chúng ta địa chỉ DHCP từ mạng gia đình. Danh sách thiết bị mạng của tôi như sau:\nNode Địa chỉ IP IP mạng gia đình Router 10.10.88.110 192.168.169.115 Switch1 10.10.88.111 192.168.169.178 Switch2 10.10.88.112 192.168.169.193 Switch3 10.10.88.113 192.168.169.125 Switch4 10.10.88.114 192.168.169.197 SSH đến thiết bị mạng Với thiết lập trên, chúng ta có thể kết nối đến các thiết bị trên mạng gia đình bằng máy trạm của mình. Tôi đang sử dụng Putty nhưng cũng có thể sử dụng các terminal khác như git bash để SSH đến các thiết bị.\nDưới đây bạn có thể thấy chúng ta có một kết nối SSH tới thiết bị router (R1). Sử dụng Python để thu thập thông tin từ các thiết bị Ví dụ đầu tiên về cách chúng ta có thể tận dụng Python là để thu thập thông tin từ tất cả các thiết bị của mình. Tôi đã lưu kịch bản này tại netmiko_con_multi.py.\nKhi tôi chạy kịch bản này, tôi có thể thấy cấu hình từng cổng trên tất cả các thiết bị của mình. Điều này có thể hữu ích nếu bạn có nhiều thiết bị khác nhau, tạo ra kịch bản này để bạn có thể kiểm soát trung tâm và hiểu nhanh tất cả các cấu hình ở một nơi.\nSử dụng Python để cấu hình các thiết bị Điều này hữu ích nhưng còn gì về việc sử dụng Python để cấu hình các thiết bị của chúng ta? Trong kịch bản của chúng ta, chúng ta có một cổng trunked giữa SW1 và SW2. Hãy tưởng tượng nếu điều này được thực hiện trên nhiều switch giống nhau, chúng ta muốn tự động hóa điều đó và không phải kết nối thủ công đến từng switch để thực hiện thay đổi cấu hình.\nChúng ta có thể sử dụng netmiko_sendchange.py để đạt được điều này. Kịch bản này sẽ kết nối qua SSH và thực hiện thay đổi trên SW1, điều này cũng sẽ thay đổi trên SW2. Với những ai xem mã, bạn sẽ thấy thông điệp xuất hiện và cho chúng ta biết đang gửi cấu hình đến thiết bị nhưng không có xác nhận rằng điều này đã xảy ra. Chúng ta có thể thêm mã bổ sung vào kịch bản của mình để thực hiện kiểm tra và xác nhận trên switch của chúng ta hoặc có thể chỉnh sửa kịch bản trước đó để cho thấy điều này. netmiko_con_multi_vlan.py Sao lưu cấu hình thiết bị của bạn Một trường hợp sử dụng khác là để ghi lại các cấu hình mạng của chúng ta và đảm bảo rằng chúng ta đã sao lưu những cấu hình đó. Nhưng một lần nữa, chúng ta không muốn kết nối đến từng thiết bị mà chúng ta có trên mạng, vì vậy chúng ta cũng có thể tự động hóa điều này bằng cách sử dụng backup.py. Bạn cũng sẽ cần điền vào backup.txt với các địa chỉ IP mà bạn muốn sao lưu.\nChạy kịch bản của bạn và bạn sẽ thấy một cái gì đó như dưới đây. Đó có thể chỉ là một kịch bản print đơn giản trong Python, vì vậy tôi cũng nên cho bạn thấy các tệp sao lưu. Paramiko Một mô-đun Python được sử dụng rộng rãi cho SSH. Bạn có thể tìm hiểu thêm tại liên kết GitHub chính thức tại đây.\nChúng ta có thể cài đặt mô-đun này bằng lệnh pip install paramiko. Chúng ta có thể xác nhận cài đặt bằng cách nhập shell Python và nhập mô-đun paramiko. Netmiko Mô-đun netmiko nhắm đến các thiết bị mạng cụ thể trong khi paramiko là một công cụ rộng hơn để xử lý các kết nối SSH tổng thể.\nNetmiko mà chúng ta đã sử dụng ở trên cùng với paramiko có thể được cài đặt bằng lệnh pip install netmiko.\nNetmiko hỗ trợ nhiều nhà cung cấp và thiết bị mạng, bạn có thể tìm danh sách các thiết bị được hỗ trợ trên Trang GitHub.\nCác mô-đun khác Cũng đáng đề cập đến một vài mô-đun khác mà chúng ta chưa có thời gian tìm hiểu nhưng chúng cung cấp nhiều chức năng hơn khi nói đến tự động hóa mạng. netaddr được sử dụng để làm việc và xử lý địa chỉ IP, lại một lần nữa, việc cài đặt rất đơn giản bằng lệnh pip install netaddr.\nNếu bạn muốn lưu trữ nhiều cấu hình switch của mình trong một bảng tính Excel, mô-đun xlrd sẽ cho phép các kịch bản của bạn đọc workbook Excel và chuyển đổi các hàng và cột thành một ma trận. Cài đặt mô-đun này bằng lệnh pip install xlrd.\nMột số trường hợp sử dụng khác mà tự động hóa mạng có thể được áp dụng mà tôi chưa có thời gian tìm hiểu có thể được tìm thấy tại đây.\n"
},
{
	"uri": "https://ngophong010.github.io/Workshop001/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ngophong010.github.io/Workshop001/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]