[
{
	"uri": "https://ngophong010.github.io/Workshop001/",
	"title": "DevOps and Networking",
	"tags": [],
	"description": "",
	"content": "A Workshop on DevOps and Networking Overall In this workshop, you\u0026rsquo;ll learn the basics and practice of Networking. The workshop focuses on understanding DevOps and Networking, providing a comprehensive overview of these important fields. The content covers topics ranging from fundamental to advanced, starting with a general introduction, then delving into the OSI model, network protocols, network automation, and the application of Python in network management. The workshop also includes hands-on components with lab building and practical experience using Python in a networking environment. This is an excellent opportunity to learn and apply DevOps and Networking skills in real-world scenarios. By the end of this workshop, participants will have gained valuable insights and practical skills in both DevOps practices and networking fundamentals, preparing them for the challenges of modern IT infrastructure management.\nContent Introduction The OSI Model - The 7 Layers Network Protocols Network Automation Python for Network Automation Building Our Lab Getting Hands-On with Python \u0026amp; Network "
},
{
	"uri": "https://ngophong010.github.io/Workshop001/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "What is NetDevOps | Network DevOps? You may also hear the terms Network DevOps or NetDevOps. Maybe you are already a Network engineer and have a great grasp on the network components within the infrastructure you understand the elements used around networking such as DHCP, DNS, NAT etc. You will also have a good understanding of the hardware or software-defined networking options, switches, routers etc.\nBut if you are not a network engineer then we probably need to get foundational knowledge across the board in some of those areas so that we can understand the end goal of Network DevOps.\nBut in regards to those terms, we can think of NetDevOps or Network DevOps as applying the DevOps Principles and Practices to the network, applying version control and automation tools to the network creation, testing, monitoring, and deployments.\nIf we think of Network DevOps as having to require automation, we mentioned before about DevOps breaking down the silos between teams. If the networking teams do not change to a similar model and process then they become the bottleneck or even the failure overall.\nUsing the automation principles around provisioning, configuration, testing, version control and deployment is a great start. Automation is overall going to enable speed of deployment, stability of the networking infrastructure and consistent improvement as well as the process being shared across multiple environments once they have been tested. Such as a fully tested Network Policy that has been fully tested on one environment can be used quickly in another location because of the nature of this being in code vs a manually authored process which it might have been before. A really good viewpoint and outline of this thinking can be found here. Network DevOps\nNetworking The Basics Network Devices If you prefer this content in video form, check out these videos from Practical Networking:\nNetwork Devices - Hosts, IP Addresses, Networks - Networking Fundamentals - Lesson 1a Network Devices - Hub, Bridge, Switch, Router - Networking Fundamentals - Lesson 1b Host are any devices which send or receive traffic. IP Address the identity of each host. Network is what transports traffic between hosts. If we did not have networks there would be a lot of manual movement of data!\nA logical group of hosts which require similar connectivity. Switches facilitate communication within a network. A switch forwards data packets between hosts. A switch sends packets directly to hosts.\nNetwork: A Grouping of hosts which require similar connectivity. Hosts on a Network share the same IP address space. Router facilitates communication between networks. As we said before that a switch looks after communication within a network a router allows us to join these networks together or at least give them access to each other if permitted.\nA router can provide a traffic control point (security, filtering, redirecting) More and more switches also provide some of these functions now.\nRouters learn which networks they are attached to. These are known as routes, a routing table is all the networks a router knows about.\nA router has an IP address in the networks they are attached to. This IP is also going to be each host\u0026rsquo;s way out of their local network also known as a gateway.\nRouters also create the hierarchy in networks I mentioned earlier. Switches vs Routers Routing is the process of moving data between networks.\nA router is a device whose primary purpose is Routing. Switching is the process of moving data within networks.\nA Switch is a device whose primary purpose is switching. This is very much a foundational overview of devices as we know there are many different Network Devices such as:\nAccess Points Firewalls Load Balancers Layer 3 Switches IDS / IPS Proxies Virtual Switches Virtual Routers Although all of these devices are going to perform Routing and/or Switching.\n"
},
{
	"uri": "https://ngophong010.github.io/Workshop001/2-osimodel/",
	"title": "The OSI Model - The 7 Layers ",
	"tags": [],
	"description": "",
	"content": "The content below comes mostly from Practical Networking\u0026rsquo;s Networking Fundamentals series. If you prefer this content in video form, check out these two videos:\nThe OSI Model: A Practical Perspective - Layers 1 / 2 / 3 The OSI Model: A Practical Perspective - Layers 4 / 5+ The OSI Model - The 7 Layers The overall purpose of networking as an industry is to allow two hosts to share data. Before networking if I want to get data from this host to this host I\u0026rsquo;d have to plug something into this host walk it over to the other host and plug it into the other host.\nNetworking allows us to automate this by allowing the host to share data automatically across the wire for these hosts to do this they must follow a set of rules.\nThis is no different than any language. English has a set of rules that two English speakers must follow. Spanish has its own set of rules. French has its own set of rules, while networking also has its own set of rules\nThe rules for networking are divided into seven different layers and those layers are known as the OSI model.\nIntroduction to the OSI Model The OSI Model (Open Systems Interconnection Model) is a framework used to describe the functions of a networking system. The OSI model characterises computing functions into a universal set of rules and requirements to support interoperability between different products and software. In the OSI reference model, the communications between a computing system are split into seven different abstraction layers: Physical, Data Link, Network, Transport, Session, Presentation, and Application. Physical Layer 1 in the OSI model and this is known as physical, the premise of being able to get data from one host to another through a means be it physical cable or we could also consider Wi-Fi in this layer as well. We might also see some more legacy hardware seen here around hubs and repeaters to transport the data from one host to another. Data Link Layer 2, the data link enables a node to node transfer where data is packaged into frames. There is also a level of error correcting that might have occurred at the physical layer. This is also where we introduce or first see MAC addresses. Network You have likely heard the term layer 3 switches or layer 2 switches. In our OSI model Layer 3, the Network has a goal of an end to end delivery, this is where we see our IP addresses also mentioned in the first-day overview.\nRouters and hosts exist at layer 3, remember the router is the ability to route between multiple networks. Anything with an IP could be considered Layer 3. So why do we need addressing schemes on both Layers 2 and 3? (MAC Addresses vs IP Addresses)\nIf we think about getting data from one host to another, each host has an IP address but there are several switches and routers in between. Each of the devices has that layer 2 MAC address.\nThe layer 2 MAC address will go from host to switch/router only, it is focused on hops whereas the layer 3 IP addresses will stay with that packet of data until it reaches its end host. (End to End)\nIP Addresses - Layer 3 = End to End Delivery\nMAC Addresses - Layer 2 = Hop to Hop Delivery\nNow there is a network protocol that we will get into but not today called ARP(Address Resolution Protocol) which links our Layer3 and Layer2 addresses.\nTransport Service to Service delivery, Layer 4 is there to distinguish data streams. In the same way that Layer 3 and Layer 2 both had their addressing schemes, in Layer 4 we have ports. Session, Presentation, Application The distinction between Layers 5,6,7 is or had become somewhat vague.\nIt is worth looking at the TCP IP Model to get a more recent understanding.\nLet\u0026rsquo;s now try and explain what\u0026rsquo;s happening when hosts are communicating with each other using this networking stack. This host has an application that\u0026rsquo;s going to generate data that is meant to be sent to another host.\nThe source host is going to go through is what\u0026rsquo;s known as the encapsulation process. That data will be first sent to layer 4.\nLayer 4 is going to add a header to that data which can facilitate the goal of layer 4 which is service to service delivery. This is going to be a port using either TCP or UDP. It is also going to include the source port and destination port.\nThis may also be known as a segment (Data and Port)\nThis segment is going to be passed down the OSI stack to layer 3, the network layer, and the network layer is going to add another header to this data. This header is going to facilitate the goal of layer 3 which is the end to end delivery meaning in this header you will have a source IP address and a destination IP, the header plus data may also be referred to as a packet.\nLayer 3 will then take that packet and hand it off to layer 2, layer 2 will once again add another header to that data to accomplish layer 2\u0026rsquo;s goal of hop to hop delivery meaning this header will include a source and destination mac address. This is known as a frame when you have the layer 2 header and data.\nThat frame then gets converted into ones and zeros and sent over the Layer 1 Physical cable or wifi. I did mention above the naming for each layer of header plus data but decided to draw this out as well. The Application sending the data is being sent somewhere so the receiving is somewhat in reverse to get that back up the stack and into the receiving host. "
},
{
	"uri": "https://ngophong010.github.io/Workshop001/3-networkprotocols/",
	"title": "Network Protocols",
	"tags": [],
	"description": "",
	"content": "Network Protocols A set of rules and messages that form a standard. An Internet Standard.\nARP - Address Resolution Protocol If you want to get really into the weeds on ARP you can read the Internet Standard here. RFC 826\nConnects IP addresses to fixed physical machine addresses, also known as MAC addresses across a layer 2 network. FTP - File Transfer Protocol Allows for the transfer of files from source to destination. Generally, this process is authenticated but there is the ability if configured to use anonymous access. You will more frequently now see FTPS which provides SSL/TLS connectivity to FTP servers from the client for better security. This protocol would be found in the Application layer of the OSI Model. SMTP - Simple Mail Transfer Protocol Used for email transmission, mail servers use SMTP to send and receive mail messages. You will still find even with Microsoft 365 that the SMTP protocol is used for the same purpose. HTTP - Hyper Text Transfer Protocol HTTP is the foundation of the internet and browsing content. Giving us the ability to easily access our favourite websites. HTTP is still heavily used but HTTPS is more so used or should be used on most of your favourite sites. SSL - Secure Sockets Layer | TLS - Transport Layer Security TLS has taken over from SSL, TLS is a Cryptographic Protocol that provides secure communications over a network. It can and will be found in the mail, Instant Messaging and other applications but most commonly it is used to secure HTTPS. HTTPS - HTTP secured with SSL/TLS An extension of HTTP, used for secure communications over a network, HTTPS is encrypted with TLS as mentioned above. The focus here was to bring authentication, privacy and integrity whilst data is exchanged between hosts. DNS - Domain Name System The DNS is used to map human-friendly domain names for example we all know google.com but if you were to open a browser and put in 8.8.8.8 you would get Google as we pretty much know it. However good luck trying to remember all of the IP addresses for all of your websites where some of them we even use google to find information.\nThis is where DNS comes in, it ensures that hosts, services and other resources are reachable.\nOn all hosts, if they require internet connectivity then they must have DNS to be able to resolve those domain names. DNS is an area you could spend Days and Years on learning. I would also say from experience that DNS is mostly the common cause of all errors when it comes to Networking. Not sure if a Network engineer would agree there though. DHCP - Dynamic Host Configuration Protocol We have discussed a lot about protocols that are required to make our hosts work, be it accessing the internet or transferring files between each other.\nThere are 4 things that we need on every host for it to be able to achieve both of those tasks.\nIP Address Subnet Mask Default Gateway DNS We have covered IP address being a unique address for your host on the network it resides, we can think of this as our house number.\nSubnet mask we will cover shortly, but you can think of this as postcode or zip code.\nA default gateway is the IP of our router generally on our network providing us with that Layer 3 connectivity. You could think of this as the single road that allows us out of our street.\nThen we have DNS as we just covered to help us convert complicated public IP addresses to more suitable and rememberable domain names. Maybe we can think of this as the giant sorting office to make sure we get the right post.\nAs I said each host requires these 4 things, if you have 1000 or 10,000 hosts then that is going to take you a very long time to determine each one of these individually. This is where DHCP comes in and allows you to determine a scope for your network and then this protocol will distribute to all available hosts in your network.\nAnother example is you head into a coffee shop, grab a coffee and sit down with your laptop or your phone let\u0026rsquo;s call that your host. You connect your host to the coffee shop WiFi and you gain access to the internet, messages and mail start pinging through and you can navigate web pages and social media. When you connected to the coffee shop WiFi your machine would have picked up a DHCP address either from a dedicated DHCP server or most likely from the router also handling DHCP. Subnetting A subnet is a logical subdivision of an IP network.\nSubnets break large networks into smaller, more manageable networks that run more efficiently.\nEach subnet is a logical subdivision of the bigger network. Connected devices with enough subnet share common IP address identifiers, enabling them to communicate with each other.\nRouters manage communication between subnets.\nThe size of a subnet depends on the connectivity requirements and the network technology used.\nAn organisation is responsible for determining the number and size of the subnets within the limits of address space available, and the details remain local to that organisation. Subnets can also be segmented into even smaller subnets for things like Point to Point links, or subnetworks supporting a few devices.\nAmong other advantages, segmenting large networks into subnets enable IP address reallocation and relieves network congestion, streamlining, network communication and efficiency.\nSubnets can also improve network security. If a section of a network is compromised, it can be quarantined, making it difficult for bad actors to move around the larger network. "
},
{
	"uri": "https://ngophong010.github.io/Workshop001/4-networkautomation/",
	"title": "Network Automation",
	"tags": [],
	"description": "",
	"content": "Network Automation Basics of network automation Primary drivers for Network Automation\nAchieve Agility Reduce Cost Eliminate Errors Ensure Compliance Centralised Management The automation adoption process is specific to each business. There\u0026rsquo;s no one size fits all when it comes to deploying automation, the ability to identify and embrace the approach that works best for your organisation is critical in advancing towards maintaining or creating a more agile environment, the focus should always be on business value and end-user experience. (We said something similar right at the start in regards to the whole of DevOps and the culture change and the automated process that this brings)\nTo break this down you would need to identify how the task or process that you\u0026rsquo;re trying to automate is going to achieve and improve the end-user experience or business value whilst following a step-by-step systematic approach.\n\u0026ldquo;If you don\u0026rsquo;t know where you are going, any road will take you there.\u0026rdquo;\nHave a framework or design structure that you\u0026rsquo;re trying to achieve know what your end goal is and then work step by step towards achieving that goal measuring the automation success at various stages based on the business outcomes.\nBuild concepts modelled around existing applications there\u0026rsquo;s no need to design the concepts around automation in a bubble because they need to be applied to your application, your service, and your infrastructure, so begin to build the concepts and model them around your existing infrastructure, you\u0026rsquo;re existing applications.\nApproach to Networking Automation We should identify the tasks and perform a discovery on network change requests so that you have the most common issues and problems to automate a solution to.\nMake a list of all the change requests and workflows that are currently being addressed manually. Determine the most common, time-consuming and error-prone activities. Prioritise the requests by taking a business-driven approach. This is the framework for building an automation process, what must be automated and what must not. We should then divide tasks and analyse how different network functions work and interact with each other.\nThe infrastructure/Network team receives change tickets at multiple layers to deploy applications. Based on Network services, divide them into different areas and understand how they interact with each other. Application Optimisation ADC (Application Delivery Controller) Firewall DDI (DNS, DHCP, IPAM etc) Routing Others Identify various dependencies to address business and cultural differences and bring in cross-team collaboration. Reusable policies, define and simplify reusable service tasks, processes and input/outputs.\nDefine offerings for various services, processes and input/outputs. Simplifying the deployment process will reduce the time to market for both new and existing workloads. Once you have a standard process, it can be sequenced and aligned to individual requests for a multi-threaded approach and delivery. Combine the policies with business-specific activities. How does implementing this policy help the business? Saves time? Saves Money? Provides a better business outcome?\nEnsure that service tasks are interoperable. Associate the incremental service tasks so that they align to create business services. Allow for the flexibility to associate and re-associate service tasks on demand. Deploy Self-Service capabilities and pave the way for improved operational efficiency. Allow for the multiple technology skillsets to continue to contribute with oversight and compliance. Iterate on the policies and process, adding and improving while maintaining availability and service.\nStart small by automating existing tasks. Get familiar with the automation process, so that you can identify other areas that can benefit from automation. Iterate your automation initiatives, adding agility incrementally while maintaining the required availability. Taking an incremental approach paves the way for success! Orchestrate the network service!\nAutomation of the deployment process is required to deliver applications rapidly. Creating an agile service environment requires different elements to be managed across technology skillsets. Prepare for an end to end orchestration that provides for control over automation and the order of deployments. Network Automation Tools The good news here is that for the most part, the tools we use here for Network automation are generally the same that we will use for other areas of automation or what we have already covered so far or what we will cover in future sessions.\nOperating System - As I have throughout this challenge, I am focusing on doing most of my learning with a Linux OS, those reasons were given in the Linux section but almost all of the tooling that we will touch albeit cross-OS platforms maybe today they all started as Linux based applications or tools, to begin with.\nIntegrated Development Environment (IDE) - Again not much to say here other than throughout I would suggest Visual Studio Code as your IDE, based on the extensive plugins that are available for so many different languages.\nConfiguration Management - We have not got to the Configuration management section yet, but it is very clear that Ansible is a favourite in this area for managing and automating configurations. Ansible is written in Python but you do not need to know Python.\nAgentless Only requires SSH Large Support Community Lots of Network Modules Push only model Configured with YAML Open Source! Link to Ansible Network Modules\nWe will also touch on Ansible Tower in the configuration management section, see this as the GUI front end for Ansible.\nCI/CD - Again we will cover more about the concepts and tooling around this but it\u0026rsquo;s important to at least mention here as this spans not only networking but all provisioning of service and platform.\nIn particular, Jenkins provides or seems to be a popular tool for Network Automation.\nMonitors git repository for changes and then initiates them. Version Control - Again something we will dive deeper into later on.\nGit provides version control of your code on your local device - Cross-Platform GitHub, GitLab, BitBucket etc are online websites where you define your repositories and upload your code. Language | Scripting - Something we have not covered here is Python as a language, I decided to dive into Go instead as the programming language based on my circumstances, I would say that it was a close call between Golang and Python and Python it seems to be the winner for Network Automation.\nNornir is something to mention here, an automation framework written in Python. This seems to take the role of Ansible but specifically around Network Automation. Nornir documentation Analyse APIs - Postman is a great tool for analysing RESTful APIs. Helps to build, test and modify APIs.\nPOST \u0026raquo;\u0026gt; To create resources objects. GET \u0026raquo;\u0026gt; To retrieve a resources. PUT \u0026raquo;\u0026gt; To create or replace the resources. PATCH \u0026raquo;\u0026gt; To create or update the resources object. Delete \u0026raquo;\u0026gt; To delete a resources Postman tool Download\nOther tools to mention Cisco NSO (Network Services Orchestrator)\nNetYCE - Simplify Network Automation\nNetwork Test Automation\n"
},
{
	"uri": "https://ngophong010.github.io/Workshop001/5-pythonfornetworkautomation/",
	"title": "Python for Network Automation",
	"tags": [],
	"description": "",
	"content": "Python for Network Automation Python is the standard language used for automated network operations.\nWhilst it is not only for network automation it seems to be everywhere when you are looking for resources and as previously mentioned if it\u0026rsquo;s not Python then it\u0026rsquo;s generally Ansible which is written also in Python.\nReadability and ease of use - It seems that Python seems just makes sense. There don\u0026rsquo;t seem to be the requirements around {} in the code to start and end blocks. Couple this with a strong IDE like VS Code you have a pretty easy start when wanting to run some python code. Pycharm might be another IDE worth mentioning here.\nLibraries - The extensibility of Python is the real gold mine here, I mentioned before that this is not just for Network Automation but in fact, there are libraries plenty for all sorts of devices and configurations. You can see the vast amount here PyPi When you want to download the library to your workstation, then you use a tool called pip to connect to PyPI and download it locally. Network vendors such as Cisco, Juniper, and Arista developed libraries to facilitate access to their devices.\nPowerful \u0026amp; Efficient - Remember during the Go days I went through the \u0026ldquo;Hello World\u0026rdquo; scenario and we went through I think 6 lines of code? In Python it is print(\u0026#39;hello world\u0026#39;) Put all of the above points together and it should be easy to see why Python is generally mentioned as the de-facto tool when working on automating.\nI think it\u0026rsquo;s important to note that it\u0026rsquo;s possible that several years back there were scripts that might have interacted with your network devices to maybe automate the backup of configuration or to gather logs and other insights into your devices. The automation we are talking about here is a little different and that\u0026rsquo;s because the overall networking landscape has also changed to suit this way of thinking better and enabled more automation.\nSoftware-Defined Network - SDN Controllers take the responsibility of delivering the control plane configuration to all devices on the network, meaning just a single point of contact for any network changes, no longer having to telnet or SSH into every device and also relying on humans to do this which has a repeatable chance of failure or misconfiguration.\nHigh-Level Orchestration - Go up a level from those SDN controllers and this allows for orchestration of service levels then there is the integration of this orchestration layer into your platforms of choice, VMware, Kubernetes, Public Clouds etc.\nPolicy-based management - What do you want to have? What is the desired state? You describe this and the system has all the details on how to figure it out to become the desired state.\nSetting up the lab environment Not everyone has access to physical routers, switches and other networking devices.\nI wanted to make it possible for us to look at some of the tooling pre-mentioned but also get hands-on and learn how to automate the configuration of our networks.\nWhen it comes to options there are a few that we can choose from.\nGNS3 VM Eve-ng Unimus Not a lab environment but an interesting concept. We will build our lab out using Eve-ng as mentioned before you can use a physical device but to be honest a virtual environment means that we can have a sandbox environment to test many different scenarios. Plus being able to play with different devices and topologies might be of interest.\nWe are going to do everything on EVE-NG with the community edition.\nGetting started The community edition comes in ISO and OVF formats for download\nWe will be using the OVF download but with the ISO there is the option to build out on a bare metal server without the need for a hypervisor. For our walkthrough, we will be using VMware Workstation as I have a license via my vExpert but you can equally use VMware Player or any of the other options mentioned in the documentation. Unfortunately we cannot use our previously used Virtual box!\nThis is also where I had an issue with GNS3 with Virtual Box even though supported.\nDownload VMware Workstation Player - FREE\nVMware Workstation PRO Also noted that there is an evaluation period for free!\nInstallation on VMware Workstation PRO Now we have our hypervisor software downloaded and installed, and we have the EVE-NG OVF downloaded. If you are using VMware Player please let me know if this process is the same.\nWe are now ready to get things configured.\nOpen VMware Workstation and then select file and open When you download the EVE-NG OVF Image it is going to be within a compressed file. Extract the contents out into its folder so it looks like this. Navigate to the location where you downloaded the EVE-NG OVF image and begin the import.\nGive it a recognisable name and store the virtual machine somewhere on your system. When the import is complete increase the number of processors to 4 and the memory allocated to 8 GB. (This should be the case after import with the latest version if not then edit VM settings)\nAlso, make sure the Virtualise Intel VT-x/EPT or AMD-V/RVI checkbox is enabled. This option instructs the VMware workstation to pass the virtualisation flags to the guest OS (nested virtualisation) This was the issue I was having with GNS3 with Virtual Box even though my CPU allows this.\nPower on \u0026amp; Access Sidenote \u0026amp; Rabbit hole: Remember I mentioned that this would not work with VirtualBox! Well yeah had the same issue with VMware Workstation and EVE-NG but it was not the fault of the virtualisation platform!\nI have WSL2 running on my Windows Machine and this seems to remove the capability of being able to run anything nested inside of your environment. I am confused as to why the Ubuntu VM does run as it seems to take out the Intel VT-d virtualisation aspect of the CPU when using WSL2.\nTo resolve this we can run the following command on our Windows machine and reboot the system, note that whilst this is off then you will not be able to use WSL2.\nbcdedit /set hypervisorlaunchtype off\nWhen you want to go back and use WSL2 then you will need to run this command and reboot.\nbcdedit /set hypervisorlaunchtype auto\nBoth of these commands should be run as administrator!\nOk back to the show, You should now have a powered-on machine in VMware Workstation and you should have a prompt looking similar to this. On the prompt above you can use:\nusername = root password = eve\nYou will then be asked to provide the root password again, this will be used to SSH into the host later on.\nWe then can change the hostname. Next, we define a DNS Domain Name, I have used the one below but I am not sure if this will need to be changed later on. We then configure networking, I am selecting static so that the IP address given will be persistent after reboots. The final step, provide a static IP address from a network that is reachable from your workstation. There are some additional steps here where you will have to provide a subnet mask for your network, default gateway and DNS.\nOnce finished it will reboot, when it is back up you can take your static IP address and put this into your browser. The default username for the GUI is admin and the password is eve while the default username for SSH is root and the password is eve but this would have been changed if you changed during the setup. I chose HTML5 for the console vs native as this will open a new tab in your browser when you are navigating through different consoles.\n"
},
{
	"uri": "https://ngophong010.github.io/Workshop001/6-buildingourlab/",
	"title": "Building our Lab",
	"tags": [],
	"description": "",
	"content": "Building our Lab We are going to continue our setup of our emulated network using EVE-NG and then hopefully get some devices deployed and start thinking about how we can automate the configuration of these devices. On Python for Network Automation we covered the installation of EVE-NG onto our machine using VMware Workstation.\nInstalling EVE-NG Client There is also a client pack that allows us to choose which application is used when we SSH to the devices. It will also set up Wireshark for packet captures between links. You can grab the client pack for your OS (Windows, macOS, Linux).\nEVE-NG Client Download Quick Tip: If you are using Linux as your client then there is this client pack.\nThe install is straightforward next, next and I would suggest leaving the defaults.\nObtaining network images This step has been a challenge, I have followed some videos that I will link at the end that links to some resources and downloads for our router and switch images whilst telling us how and where to upload them.\nIt is important to note that I using everything for education purposes. I would suggest downloading official images from network vendors.\nBlog \u0026amp; Links to YouTube videos\nHow To Add Cisco VIRL vIOS image to Eve-ng\nOverall the steps here are a little complicated and could be much easier but the above blogs and videos walk through the process of adding the images to your EVE-NG box.\nI used FileZilla to transfer the qcow2 to the VM over SFTP.\nFor our lab, we need Cisco vIOS L2 (switches) and Cisco vIOS (router)\nCreate a Lab Inside the EVE-NG web interface, we are going to create our new network topology. We will have four switches and one router that will act as our gateway to outside networks.\nNode IP Address Router 10.10.88.110 Switch1 10.10.88.111 Switch2 10.10.88.112 Switch3 10.10.88.113 Switch4 10.10.88.114 Adding our Nodes to EVE-NG When you first log in to EVE-NG you will see a screen like the below, we want to start by creating our first lab. Give your lab a name and the other fields are optional. You will be then greeted with a blank canvas to start creating your network. Right-click on your canvas and choose add node.\nFrom here you will have a long list of node options, If you have followed along above you will have the two in blue shown below and the others are going to be grey and unselectable. We want to add the following to our lab:\n1 x Cisco vIOS Router 4 x Cisco vIOS Switch Run through the simple wizard to add them to your lab and it should look something like this. Connecting our nodes We now need to add our connectivity between our routers and switches. We can do this quite easily by hovering over the device and seeing the connection icon as per below and then connecting that to the device we wish to connect to. When you have finished connecting your environment you may also want to add some way to define physical boundaries or locations using boxes or circles which can also be found in the right-click menu. You can also add text which is useful when we want to define our naming or IP addresses in our labs.\nI went ahead and made my lab look like the below. You will also notice that the lab above is all powered off, we can start our lab by selecting everything and right-clicking and selecting start selected. Once we have our lab up and running you will be able to console into each device and you will notice at this stage they are pretty dumb with no configuration. We can add some configuration to each node by copying or creating your own in each terminal.\nI will leave my configuration in the Networking folder of the repository for reference.\nNode Configuration Router R1 Switch1 SW1 Switch2 SW2 Switch3 SW3 Switch4 SW4 "
},
{
	"uri": "https://ngophong010.github.io/Workshop001/7-hands-on/",
	"title": "Getting Hands-On with Python &amp; Network",
	"tags": [],
	"description": "",
	"content": "Getting Hands-On with Python \u0026amp; Network In this final section of Networking fundamentals, we are going to cover some automation tasks and tools with our lab environment created on Building our Lab\nWe will be using an SSH tunnel to connect to our devices from our client vs telnet. The SSH tunnel created between client and device is encrypted.\nAccess our virtual emulated environment For us to interact with our switches we either need a workstation inside the EVE-NG network or you can deploy a Linux box there with Python installed to perform your automation (Resource for setting up Linux inside EVE-NG) or you can do something like me and define a cloud for access from your workstation. To do this, we have right-clicked on our canvas and we have selected network and then selected \u0026ldquo;Management(Cloud0)\u0026rdquo; this will bridge out to our home network. However, we do not have anything inside this network so we need to add connections from the new network to each of our devices. (My networking knowledge needs more attention and I feel that you could just do this next step to the top router and then have connectivity to the rest of the network through this one cable?)\nI have then logged on to each of our devices and I have run through the following commands for the interfaces applicable to where the cloud comes in.\nenable config t int g0/0 IP add DHCP no sh exit exit sh ip int br The final step gives us the DHCP address from our home network. My device network list is as follows:\nNode IP Address Home Network IP Router 10.10.88.110 192.168.169.115 Switch1 10.10.88.111 192.168.169.178 Switch2 10.10.88.112 192.168.169.193 Switch3 10.10.88.113 192.168.169.125 Switch4 10.10.88.114 192.168.169.197 SSH to a network device With the above in place, we can now connect to our devices on our home network using our workstation. I am using Putty but also have access to other terminals such as git bash that give me the ability to SSH to our devices.\nBelow you can see we have an SSH connection to our router device. (R1) Using Python to gather information from our devices The first example of how we can leverage Python is to gather information from all of our devices and in particular, I want to be able to connect to each one and run a simple command to provide me with interface configuration and settings. I have stored this script here netmiko_con_multi.py\nNow when I run this I can see each port configuration over all of my devices. This could be handy if you have a lot of different devices, create this one script so that you can centrally control and understand quickly all of the configurations in one place.\nUsing Python to configure our devices The above is useful but what about using Python to configure our devices, in our scenario we have a trunked port between SW1 and SW2 again imagine if this was to be done across many of the same switches we want to automate that and not have to manually connect to each switch to make the configuration change.\nWe can use netmiko_sendchange.py to achieve this. This will connect over SSH and perform that change on our SW1 which will also change to SW2. Now for those that look at the code, you will see the message appears and tells us sending configuration to device but there is no confirmation that this has happened we could add additional code to our script to perform that check and validation on our switch or we could modify our script before to show us this. netmiko_con_multi_vlan.py Backing up your device configurations Another use case would be to capture our network configurations and make sure we have those backed up, but again we don\u0026rsquo;t want to be connecting to every device we have on our network so we can also automate this using backup.py. You will also need to populate the backup.txt with the IP addresses you want to backup.\nRun your script and you should see something like the below. That could be me just writing a simple print script in python so I should show you the backup files as well. Paramiko A widely used Python module for SSH. You can find out more at the official GitHub link here\nWe can install this module using the pip install paramiko command. We can verify the installation by entering the Python shell and importing the paramiko module. Netmiko The netmiko module targets network devices specifically whereas paramiko is a broader tool for handling SSH connections overall.\nNetmiko which we have used above alongside paramiko can be installed using pip install netmiko\nNetmiko supports many network vendors and devices, you can find a list of supported devices on the GitHub Page\nOther modules It is also worth mentioning a few other modules that we have not had the chance to look at but they give a lot more functionality when it comes to network automation.\nnetaddr is used for working with and manipulating IP addresses, again the installation is simple with pip install netaddr\nyou might find yourself wanting to store a lot of your switch configuration in an excel spreadsheet, the xlrd will allow your scripts to read the excel workbook and convert rows and columns into a matrix. pip install xlrd to get the module installed.\nSome more use cases where network automation can be used that I have not had the chance to look into can be found here\n"
},
{
	"uri": "https://ngophong010.github.io/Workshop001/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ngophong010.github.io/Workshop001/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]